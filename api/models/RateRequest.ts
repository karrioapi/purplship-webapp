/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.2.1`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade. 
 *
 * The version of the OpenAPI document: 2021.2.1
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Address,
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
    Parcel,
    ParcelFromJSON,
    ParcelFromJSONTyped,
    ParcelToJSON,
} from './';

/**
 * 
 * @export
 * @interface RateRequest
 */
export interface RateRequest {
    /**
     * 
     * @type {Address}
     * @memberof RateRequest
     */
    shipper: Address;
    /**
     * 
     * @type {Address}
     * @memberof RateRequest
     */
    recipient: Address;
    /**
     * The shipment's parcels
     * @type {Array<Parcel>}
     * @memberof RateRequest
     */
    parcels: Array<Parcel>;
    /**
     * 
     * The requested carrier service for the shipment.<br/>
     * Please consult [the reference](#operation/references) for specific carriers services.
     * 
     * Note that this is a list because on a Multi-carrier rate request you could specify a service per carrier.
     * @type {Array<string>}
     * @memberof RateRequest
     */
    services?: Array<string> | null;
    /**
     * 
     * The options available for the shipment.
     * 
     * Please consult [the reference](#operation/references) for additional specific carriers options.
     * @type {object}
     * @memberof RateRequest
     */
    options?: object | null;
    /**
     * The shipment reference
     * @type {string}
     * @memberof RateRequest
     */
    reference?: string | null;
    /**
     * 
     * The list of configured carriers you wish to get rates from.
     * @type {Array<string>}
     * @memberof RateRequest
     */
    carrier_ids?: Array<string> | null;
}

export function RateRequestFromJSON(json: any): RateRequest {
    return RateRequestFromJSONTyped(json, false);
}

export function RateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RateRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'shipper': AddressFromJSON(json['shipper']),
        'recipient': AddressFromJSON(json['recipient']),
        'parcels': ((json['parcels'] as Array<any>).map(ParcelFromJSON)),
        'services': !exists(json, 'services') ? undefined : json['services'],
        'options': !exists(json, 'options') ? undefined : json['options'],
        'reference': !exists(json, 'reference') ? undefined : json['reference'],
        'carrier_ids': !exists(json, 'carrier_ids') ? undefined : json['carrier_ids'],
    };
}

export function RateRequestToJSON(value?: RateRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'shipper': AddressToJSON(value.shipper),
        'recipient': AddressToJSON(value.recipient),
        'parcels': ((value.parcels as Array<any>).map(ParcelToJSON)),
        'services': value.services,
        'options': value.options,
        'reference': value.reference,
        'carrier_ids': value.carrier_ids,
    };
}


